@{
    ViewBag.Title = "Home Page";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Quick Test</title>
    <style>
        #viewbox {
            overflow:hidden;
            width: 100%;
            height: 100%;
            position:absolute;
            top:0px;
            left:0px;
        }
        #background-video {
            overflow: hidden;
            z-index: -1;
            position: absolute;
            margin: auto;
            top: 0px;
            width: 100%;
            height: 100%;
        }

        #sphere-box {
            z-index: 2000;
            overflow: hidden;
            height: 18000px;
            width: 18000px; /* 50px per degree at 30 ft */
        }

        #heads-up-display {
            z-index: 4000;
            margin: auto;
            top: 0px;
            width: 99.1%;
            height: 99.1%;
            overflow: hidden;
            position: absolute;
        }

            #heads-up-display div {
                background-color: rgba(255,0,0,.3);
                width: 33%;
                height: 20%;
            }

        #hud-top-left {
            position: absolute;
            top: 0px;
            left: 0px;
        }

        div#hud-top-center {
            position: absolute;
            top: 0px;
            left: 33.3%;
            background-color: transparent;
        }

        #hud-top-right {
            position: absolute;
            top: 0px;
            left: 66.6%;
        }

        div#hud-center-center {
            position: absolute;
            top: 33.3%;
            left: 33.3%;
            height: 33.3%;
            width: 33.3%;
            vertical-align: middle;
            background-color: rgba(255,0,0,0.0);
        }

            div#hud-center-center div.crosshair {
                position: absolute;
                width: 1.25em;
                height: 1.25em;
                position: absolute;
                top: 50%;
                left: 50%;
                margin-left: -.75em;
                margin-top: -.75em;
                text-align: center;
                font-weight: 700;
                font-size: 2em;
                text-shadow: 0em 0em 0.1em #8F7;
                overflow: visible;
                background-color: transparent;
            }

        #hud-bottom-left {
            position: absolute;
            height: 20%;
            bottom: 0px;
            left: 0px;
        }

        #hud-bottom-center {
            position: absolute;
            left: 33.3%;
            height: 20%;
            bottom: 0px;
            width: 33.3%;
        }

        #hud-bottom-right {
            position: absolute;
            height: 20%;
            bottom: 0px;
            left: 66.6%;
            width: 33%;
        }
    </style>
</head>
<body>
    <div id="viewbox">

        <video autoplay id="background-video"></video>
        <div id="sphere-box"></div>
        <div id="heads-up-display">
            <div id="hud-top-left"><span style="color:red;">Top Left</span></div>
            <div id="hud-top-center">
                <span style="color:red;">
                    <canvas id="compassCanvas" style="width:100%; height:400px; border:1px solid #d3d3d3;"></canvas>
                </span>
            </div>
            <div id="hud-top-right"><span style="color:red;">Top Right</span></div>
            <div id="hud-center-center"><div class="crosshair">+</div><span style="color:red;"></span></div>
            <div id="hud-bottom-left"><span style="color:red;">Bottom Left<button onclick="fakecompass()">Load fake compass</button></span></div>
            <div id="hud-bottom-center"><span style="color:red;">Bottom Center</span></div>
            <div id="hud-bottom-right"><span style="color:red;">Bottom Right</span></div>
        </div>
    </div>
    <script>
        function setViewBoxSize() {
            var w = window.innerWidth
            || document.documentElement.clientWidth
            || document.body.clientWidth;

            var h = window.innerHeight
            || document.documentElement.clientHeight
            || document.body.clientHeight;

            document.getElementById('viewbox').style.height = (h - (h * .01));
            document.getElementById('viewbox').style.width = (w - (w * .01));
        }
        //window.addEventListener("resize", setViewBoxSize);
        //setViewBoxSize();

        function hasGetUserMedia() {
            return !!(navigator.getUserMedia || navigator.webkitGetUserMedia ||
                      navigator.mozGetUserMedia || navigator.msGetUserMedia);
        }

        if (hasGetUserMedia()) {
            // Good to go!
        } else {
            alert('getUserMedia() is not supported in your browser. No background video will be displayed.');
        }
        (function (hud, $, undefined) {

            hud.latitude = null;
            hud.longitude = null;
            hud.elevation = null;
            hud.speed = null;
            hud.timestamp = null;
            hud.updatePosition = function (position) {
                hud.latitude = position.coords.latitude;
                hud.longitude = position.coords.longitude;
                hud.elevation = position.coords.altitude;
                hud.speed = position.coords.speed;
                hud.timestamp = position.coords.timestamp;
                console.log('Lat and long:' + hud.latitude + ',' + hud.longitude);
            }

        }(window.hud = window.hud || {}, jQuery));

        //Alpha 0-180
        var errorCallback = function (e) {
            console.log('Reeeejected!', e);
        };
        var hdConstraints = {
            video: {
                mandatory: {
                    minWidth: 1280,
                    minHeight: 720
                }
            },
            audio: false
        };
        var vgaConstraints = {
            video: {
                mandatory: {
                    maxWidth: 640,
                    maxHeight: 360
                }
            }
        };
        function fakecompass() {
            var c = document.getElementById("compassCanvas");
            var ctx = c.getContext("2d");
            var x = c.width / 2;
            var y = c.height / 2;
            ctx.font = '40px Calibri';
            ctx.textAlign = 'center';
            ctx.fillStyle = "#FF7777";
            ctx.fillText('|  | 10\xB0  |  |', x, y);
        }
        var oa = null;
        var og = null;
        var ob = null;
        function deviceOrientationListener(event) {
            //TODO: repurpose this code to be a compass.
            if (oa != event.alpha || ob != event.beta || og != event.gamma) {
                console.log(event.alpha + ' ' + event.beta + ' ' + event.gamma + ' ');

                oa = event.alpha;
                ob = event.beta;
                og = event.gamma;

                console.log(compassHeading(oa, ob, og));
                var c = document.getElementById("compassCanvas");
                var ctx = c.getContext("2d");

                ctx.clearRect(0, 0, c.width, c.height);
                ctx.fillStyle = "#FF7777";
                ctx.font = "14px Verdana";
                ctx.fillText("Alpha: " + Math.round(event.alpha), 10, 20);
                ctx.beginPath();
                ctx.moveTo(180, 75);
                ctx.lineTo(210, 75);
                ctx.arc(180, 75, 60, 0, event.alpha * Math.PI / 180);
                ctx.fill();

                ctx.fillStyle = "#FF6600";
                ctx.fillText("Beta: " + Math.round(event.beta), 10, 140);
                ctx.beginPath();
                ctx.fillRect(180, 150, event.beta, 90);

                ctx.fillStyle = "#FF0000";
                ctx.fillText("Gamma: " + Math.round(event.gamma), 10, 270);
                ctx.beginPath();
                ctx.fillRect(90, 340, 180, event.gamma);
            }
        }
        if (window.DeviceOrientationEvent) {
            // Our browser supports DeviceOrientation
            window.addEventListener("deviceorientation", deviceOrientationListener);
        } else {
            alert("Sorry, your browser doesn't support Device Orientation, Compass will not work.");
        }
        function startVideo() {
            navigator.getUserMedia(hdConstraints, function (localMediaStream) {
                var video = document.querySelector('video');
                video.src = window.URL.createObjectURL(localMediaStream);

                // Note: onloadedmetadata doesn't fire in Chrome when using it with getUserMedia.
                // See crbug.com/110938.
                video.onloadedmetadata = function (e) {
                    // Ready to go. Do some stuff.
                };
            }, errorCallback);
        }
        startVideo();
        //navigator.getUserMedia(hdConstraints, successCallback, errorCallback);
        function compassHeading(alpha, beta, gamma) {

            // Convert degrees to radians
            var alphaRad = alpha * (Math.PI / 180);
            var betaRad = beta * (Math.PI / 180);
            var gammaRad = gamma * (Math.PI / 180);

            // Calculate equation components
            var cA = Math.cos(alphaRad);
            var sA = Math.sin(alphaRad);
            var cB = Math.cos(betaRad);
            var sB = Math.sin(betaRad);
            var cG = Math.cos(gammaRad);
            var sG = Math.sin(gammaRad);

            // Calculate A, B, C rotation components
            var rA = -cA * sG - sA * sB * cG;
            var rB = -sA * sG + cA * sB * cG;
            var rC = -cB * cG;

            // Calculate compass heading
            var compassHeading = Math.atan(rA / rB);

            // Convert from half unit circle to whole unit circle
            if (rB < 0) {
                compassHeading += Math.PI;
            } else if (rA < 0) {
                compassHeading += 2 * Math.PI;
            }

            // Convert radians to degrees
            compassHeading *= 180 / Math.PI;

            return compassHeading;

        }

        window.addEventListener('deviceorientation', function (evt) {

            var heading = null;

            if (evt.absolute === true && evt.alpha !== null) {
                heading = compassHeading(evt.alpha, evt.beta, evt.gamma);
            }
            //correct header for surface weirdness on the compass.
            heading = heading + 90;
            if (heading >= 360) { heading = heading - 360; }

            // Do something with 'heading'...
            document.getElementById("hud-top-left").innerHTML = 'Compass: ' +heading;
        }, false);
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }

        function showPosition(position) {
            hud.updatePosition(position);
            x.innerHTML = "Latitude: " + position.coords.latitude +
            "<br>Longitude: " + position.coords.longitude;

        }
        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    x.innerHTML = "User denied the request for Geolocation."
                    break;
                case error.POSITION_UNAVAILABLE:
                    x.innerHTML = "Location information is unavailable."
                    break;
                case error.TIMEOUT:
                    x.innerHTML = "The request to get user location timed out."
                    break;
                case error.UNKNOWN_ERROR:
                    x.innerHTML = "An unknown error occurred."
                    break;
            }
        }
        
       




    </script>

</body>
</html>