@{
    ViewBag.Title = "Home Page";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    @Scripts.Render("~/bundles/jquery")
    <title>Quick Test</title>
    <style>
        #viewbox {
            overflow: hidden;
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0px;
            left: 0px;
            background-color: transparent;
        }

        #background-video {
            overflow: hidden;
            z-index: -1;
            position: absolute;
            margin: auto;
            top: 0px;
            width: 100%;
            height: 100%;
        }

        #sphere-box {
            z-index: 2000;
            overflow: hidden;
            background-color: transparent;
            height: 18000px;
            width: 18000px; /* 50px per degree at 30 ft */
        }

        #sphere-box2 {
            z-index: 2000;
            overflow: hidden;
            background-color: transparent;
            position: absolute;
            top: 0px;
            left: 0px;
            height: 100%;
            width: 100%; /* 50px per degree at 30 ft */
        }

        #heads-up-display {
            z-index: 4000;
            margin: auto;
            top: 0px;
            width: 99.1%;
            height: 99.1%;
            overflow: hidden;
            position: absolute;
            background-color: transparent;
        }

            #heads-up-display > div {
                background-color: rgba(255,0,0,.3);
                width: 33%;
                height: 20%;
            }

        #hud-top-left {
            position: absolute;
            top: 0px;
            left: 0px;
        }

        div#hud-top-center {
            position: absolute;
            top: 0px;
            left: 33.3%;
            background-color: transparent;
        }

        #hud-top-right {
            position: absolute;
            top: 0px;
            left: 66.6%;
        }

        div#hud-center-center {
            position: absolute;
            top: 33.3%;
            left: 33.3%;
            height: 33.3%;
            width: 33.3%;
            vertical-align: middle;
            background-color: rgba(255,0,0,0.0);
        }

            div#hud-center-center div.crosshair {
                position: absolute;
                width: 1.25em;
                height: 1.25em;
                position: absolute;
                top: 50%;
                left: 50%;
                margin-left: -.75em;
                margin-top: -.75em;
                text-align: center;
                font-weight: 700;
                font-size: 2em;
                text-shadow: 0em 0em 0.1em #8F7;
                overflow: visible;
                background-color: transparent;
            }

        #hud-bottom-left {
            position: absolute;
            height: 20%;
            bottom: 0px;
            left: 0px;
        }

        #hud-bottom-center {
            position: absolute;
            left: 33.3%;
            height: 20%;
            bottom: 0px;
            width: 33.3%;
        }

        #hud-bottom-right {
            position: absolute;
            height: 20%;
            bottom: 0px;
            left: 66.6%;
            width: 33%;
        }

        #map {
            height: 150px;
        }
    </style>
    <link href="~/Styles/Compass/app.css" rel="stylesheet" />
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.5/leaflet.css" />
    <link href="~/Styles/Minimap/leaflet.awesome-markers.css" rel="stylesheet" />
</head>
<body>
    <div id="viewbox">
        <video autoplay id="background-video"></video>
        <div id="sphere-box"></div>
        <div id="sphere-box2"></div>
        <div id="heads-up-display">
            <div id="hud-top-left"><span style="color:red;">Top Left</span><button onclick="getNewPositions()">Get New Positions</button></div>
            <div id="hud-top-center">

                <div class="compass" style="height: 100%">
                    <div id="rose" class="compass__rose" style="background-color: transparent;">
                        <svg class="compass__rose__dial" viewBox="0 0 130 130" version="1.1" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="65" cy="65" r="56" stroke="white" stroke-width="1" fill="none" />
                            <polyline points="63,9  67,9  65,13" fill="white" />
                            <polyline points="121,63  121,67  119,65" fill="white" />
                            <polyline points="63,121  67,121  65,119" fill="white" />
                            <polyline points="9,63  9,67  11,65" fill="white" />
                            <text x="65" y="4.2" font-size="5" text-anchor="middle" fill="white">N</text>
                            <text x="127" y="67" font-size="5" text-anchor="middle" fill="white">E</text>
                            <text x="65" y="129" font-size="5" text-anchor="middle" fill="white">S</text>
                            <text x="2.8" y="67" font-size="5" text-anchor="middle" fill="white">W</text>
                        </svg>
                    </div>
                    <svg class="compass__pointer" viewBox="0 0 130 130" version="1.1" xmlns="http://www.w3.org/2000/svg">
                        <polyline points="60,60  70,60  65,15" fill="#b60000" />
                        <polyline points="60,70  70,70  65,115" fill="white" />
                        <circle cx="65" cy="65" r="7" stroke="#b60000" stroke-width="7" fill="none" />
                    </svg>
                </div>

                <div class='status' style="background-color: transparent;">
                    <div id='debug-orientation-default'></div>
                    <div id='debug-orientation'></div>
                    <div class='position row' style="background-color: rgba(255,0,0,.3);">
                        <div class='column-33'>
                            <div class='label'>HDG</div>
                            <div id='position-hng'>n/a</div>
                        </div><div class='column-33'>
                            <div class='label'>Lat</div>
                            <div id='position-lat'>&#8943;</div>
                        </div><div class='column-33'>
                            <div class='label'>Lng</div>
                            <div id='position-lng'>&#8943;</div>
                        </div>
                    </div>
                    <div class="options row" style="display: none;">
                        <button id="btn-lock-orientation" class="btn btn--hide options__btn column-25" type="button">
                            <svg alt="lock off" class="btn__icon btn__icon--inactive" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path id="lock-15-icon" d="M256,90.001c91.74,0,166,74.243,166,166c0,91.74-74.243,165.998-166,165.998
          c-91.741,0-166-74.241-166-165.998C90,164.259,164.243,90.001,256,90.001 M256,50.001c-113.771,0-206,92.229-206,206
          s92.229,205.998,206,205.998c113.771,0,206-92.227,206-205.998S369.771,50.001,256,50.001L256,50.001z M358.999,242.667V347h-148
          V242.667H358.999z M238.667,196.333v31.334h25v-31.334c0-30.511-24.822-55.333-55.334-55.333c-30.51,0-55.332,24.822-55.332,55.333
          v31.334h25v-31.334c0-16.726,13.607-30.333,30.332-30.333C225.06,166,238.667,179.607,238.667,196.333z" fill="white" />
        </svg>
                            <svg alt="lock on" class="btn__icon btn__icon--active" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path id="lock-13-icon" d="M256,90.001c91.74,0,166,74.243,166,166c0,91.74-74.243,165.998-166,165.998
          c-91.741,0-166-74.241-166-165.998C90,164.259,164.243,90.001,256,90.001 M256,50.001c-113.771,0-206,92.229-206,206
          s92.229,205.998,206,205.998c113.771,0,206-92.227,206-205.998S369.771,50.001,256,50.001L256,50.001z M201.225,227.537v-31.585
          c0-30.755,25.021-55.776,55.775-55.776s55.775,25.021,55.775,55.776v31.585h-25.2v-31.585c0-16.859-13.716-30.576-30.575-30.576
          s-30.575,13.717-30.575,30.576v31.585H201.225z M182.409,242.656v105.169h149.182V242.656H182.409z" fill="white" />
        </svg>

                        </button><button id="btn-nightmode" class="btn options__btn column-33" type="button">
                            <svg lock="nightmode off" class="btn__icon btn__icon--inactive" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path d="M255.5,156c-55.141,0-100,44.86-100,100c0,55.141,44.859,100,100,100s100-44.859,100-100
            C355.5,200.86,310.641,156,255.5,156z M255.5,316c-33.084,0-60-26.916-60-60s26.916-60,60-60s60,26.916,60,60S288.584,316,255.5,316
            z M150.779,179.064l-54.586-54.586l28.285-28.284l54.664,54.664C168.305,158.75,158.73,168.272,150.779,179.064z M332.436,151.28
            l55.086-55.086l28.285,28.284l-55.164,55.165C352.75,168.805,343.229,159.229,332.436,151.28z M127.039,276H50v-40h77.039
            c-1.012,6.521-1.539,13.2-1.539,20C125.5,262.801,126.027,269.479,127.039,276z M236,127.463V50h40v77.622
            c-6.68-1.062-13.525-1.622-20.5-1.622C248.873,126,242.362,126.502,236,127.463z M179.143,361.143l-54.664,54.664l-28.285-28.285
            l54.586-54.585C158.729,343.729,168.305,353.251,179.143,361.143z M462,236v40h-78.039c1.012-6.521,1.539-13.199,1.539-20
            c0-6.8-0.527-13.479-1.539-20H462z M276,384.378V462h-40v-77.463c6.362,0.962,12.873,1.463,19.5,1.463
            C262.475,386,269.32,385.441,276,384.378z M360.643,332.357l55.164,55.164l-28.285,28.285l-55.086-55.086
            C343.229,352.771,352.751,343.195,360.643,332.357z" fill="white" />
        </svg>
                            <svg class="btn__icon btn__icon--active" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <circle cx="256" cy="256" r="206" fill="white" />
        </svg>
                        </button><button id="btn-map" class="btn options__btn column-33" type="button">
                            <svg alt="map" class="btn__icon btn__icon--inactive" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path id="location-icon" d="M256,50c-72.072,0-130.5,58.427-130.5,130.5c0,72.073,57.114,155.833,130.5,281.5
          c73.388-125.666,130.5-209.427,130.5-281.5C386.5,108.427,328.074,50,256,50z M256,224.133c-25.848,0-46.801-20.953-46.801-46.8
          s20.953-46.8,46.801-46.8s46.801,20.953,46.801,46.8S281.848,224.133,256,224.133z" fill="white" />
        </svg>
                        </button><button id="btn-info" class="btn btn-popup options__btn column-33" type="button" data-name='info'>
                            <svg alt="info" class="btn__icon btn__icon--inactive" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path id="info-2-icon" d="M255.998,90.001c91.74,0,166.002,74.241,166.002,165.998c0,91.741-74.245,166-166.002,166
          c-91.74,0-165.998-74.243-165.998-166C90,164.259,164.243,90.001,255.998,90.001 M255.998,50.001
          C142.229,50.001,50,142.229,50,255.999c0,113.771,92.229,206,205.998,206c113.771,0,206.002-92.229,206.002-206
          C462,142.229,369.77,50.001,255.998,50.001L255.998,50.001z M285.822,367.567h-57.646V230.6h57.646V367.567z M257,202.268
          c-17.522,0-31.729-14.206-31.729-31.73c0-17.522,14.206-31.729,31.729-31.729c17.524,0,31.728,14.206,31.728,31.729
          C288.728,188.062,274.524,202.268,257,202.268z" fill="white" />
        </svg>
                        </button>
                    </div>
                </div>

                <div id="popup" class="popup">
                    <div id="popup-content" class="popup__content">
                        <div id="popup-contents" class="popup__contents">
                            <div id="popup-inner-info" class="popup__inner popup__inner--hide">
                                <p>
                                    For best results calibrate the accelerometer in your device by tracing out a figure of 8 in the air several times vertically and horizontally. The heading can also be affected by nearby magnetic fields.
                                </p>
                                <p>
                                    For more information, bugs or comments please visit <a href='https://github.com/lamplightdev/compass'>the repo on github</a>.
                                </p>
                            </div>
                            d<div id="popup-inner-noorientation" class="popup__inner popup__inner--hide">
                                <p>
                                    Unfortunately this browser doesn't support orientation so will not show your correct heading.
                                </p>
                            </div>
                        </div>
                        <button id="popup-close" class="popup__close" href='#'>close</button>
                    </div>
                </div>
            </div>
            <div id="hud-top-right">
                <span style="color:red;">Top Right</span>
                <div id="map"></div>
            </div>
            <div id="hud-center-center"><div class="crosshair">+</div><span style="color:red;"></span></div>
            <div id="hud-bottom-left"><span style="color:red;">Bottom Left<button onclick="fakecompass()">Load fake compass</button></span></div>
            <div id="hud-bottom-center"><span style="color:red;">Bottom Center</span></div>
            <div id="hud-bottom-right"><span style="color:red;">Bottom Right</span><span id="fulltilt"></span><button onclick="getNewPositions()" style="position:absolute; bottom: 0px; right: 0px;">Get New Positions</button></div>
            <div id="x" style="display: none;"></div>
        </div>
    </div>
    <script src="~/Scripts/fulltilt.js"></script>
    <script src="~/Scripts/AppScripts/hud-system.js"></script>
    <script src="~/Scripts/AppScripts/projection-system.js"></script>
    <script>

        //window.addEventListener("resize", hud.setViewBoxSize('sphere-box2'));

        //Alpha 0-180



        //var oa = null;
        //var og = null;
        //var ob = null;
        //function deviceOrientationListener(event) {
        //    //TODO: repurpose this code to be a compass.
        //    if (oa != event.alpha || ob != event.beta || og != event.gamma) {
        //        console.log(event.alpha + ' ' + event.beta + ' ' + event.gamma + ' ');

        //        oa = event.alpha;
        //        ob = event.beta;
        //        og = event.gamma;
        //        console.log(compassHeading(oa, ob, og));
        //    }
        //}
        //if (window.DeviceOrientationEvent) {
        //    // Our browser supports DeviceOrientation
        //    window.addEventListener("deviceorientation", deviceOrientationListener);
        //} else {
        //    alert("Sorry, your browser doesn't support Device Orientation, Compass will not work.");
        //}



        //navigator.getUserMedia(hdConstraints, successCallback, hud.errorCallback);
        //function compassHeading(alpha, beta, gamma) {

        //    // Convert degrees to radians
        //    var alphaRad = alpha * (Math.PI / 180);
        //    var betaRad = beta * (Math.PI / 180);
        //    var gammaRad = gamma * (Math.PI / 180);

        //    // Calculate equation components
        //    var cA = Math.cos(alphaRad);
        //    var sA = Math.sin(alphaRad);
        //    var cB = Math.cos(betaRad);
        //    var sB = Math.sin(betaRad);
        //    var cG = Math.cos(gammaRad);
        //    var sG = Math.sin(gammaRad);

        //    // Calculate A, B, C rotation components
        //    var rA = -cA * sG - sA * sB * cG;
        //    var rB = -sA * sG + cA * sB * cG;
        //    var rC = -cB * cG;

        //    // Calculate compass heading
        //    var compassHeading = Math.atan(rA / rB);

        //    // Convert from half unit circle to whole unit circle
        //    if (rB < 0) {
        //        compassHeading += Math.PI;
        //    } else if (rA < 0) {
        //        compassHeading += 2 * Math.PI;
        //    }

        //    // Convert radians to degrees
        //    compassHeading *= 180 / Math.PI;

        //    return compassHeading;

        //}

        //window.addEventListener('deviceorientation', function (evt) {

        //    var heading = null;

        //    if (evt.absolute === true && evt.alpha !== null) {
        //        heading = compassHeading(evt.alpha, evt.beta, evt.gamma);
        //    }
        //    //correct header for surface weirdness on the compass.
        //    heading = heading + 90;
        //    if (heading >= 360) { heading = heading - 360; }

        //    // Do something with 'heading'...
        //    document.getElementById("hud-top-left").innerHTML = 'Compass: ' +heading;
        //}, false);



        var fulltiltPromise = FULLTILT.getDeviceOrientation({ 'type': 'world' });

        // Wait for Promise result
        fulltiltPromise.then(function (deviceOrientation) { // Device Orientation Events are supported
            // Register a callback to run every time a new
            // deviceorientation event is fired by the browser.
            deviceOrientation.listen(function () {
                // Get the current *screen-adjusted* device orientation angles
                var currentOrientation = deviceOrientation.getScreenAdjustedEuler();
                // Calculate the current compass heading that the user is 'looking at' (in degrees)
                var compassHeading = 360 - currentOrientation.alpha;
                // Do something with `compassHeading` here...
                hud.compassAngle = compassHeading;
                document.getElementById('fulltilt').innerHTML = 'FullTilt: ' + hud.compassAngle;
            });
        }).catch(function (errorMessage) { // Device Orientation Events are not supported
            console.log(errorMessage);
            // Implement some fallback controls here...
        });

        $('#sphere-box2').append('<img src="/Content/Images/Source/r2d2-512.png" style="position:absolute;" id="movethis" />');
        if (hud.determineVisible(hud.compassAngle, hud.groundAngle)) {
            var imgsize = hud.determineSize(60);
            var position = hud.determineLocation(hud.compassAngle, hud.groundAngle);
            document.getElementById('movethis').style.height = imgsize + '%';
            document.getElementById('movethis').style.width = imgsize + '%';
            document.getElementById('movethis').style.top = (position.top - (document.getElementById('movethis').clientHeight / 2)) + 'px';
            document.getElementById('movethis').style.left = (position.left - (document.getElementById('movethis').clientWidth / 2)) + 'px';
        };

        //set positions



        //determine if image is visible
        //create image;
        //resize image;
        //place image;
        //repeat every time we move.

        //id: unitId,
        //    position: {
        //    distance: positionData.GroundDistance,
        //    bearing: positionData.Bearing,
        //    latitude: position.latitude,
        //    longitude: position.longitude,
        //    elevation: position.elevation,
        //    elevationAngle: positionData.VerticalBearing,
        //    obstructions: positionData.Obstructions,
        //    totalObstructions: positionData.TotalObstructions
        //    },
        //unitType: positionMessage.unit,
        //    timestamp: Date.now()
        //window.targets[]
        positionData.GetLatestData();

        function getNewPositions() {
            positionData.GetLatestData();
        }

    </script>
    <script src="~/Scripts/Video/Video.js"></script>
    <script>
        hud.testForVideo();
        hud.startVideo();

    </script>
    <script src="~/Scripts/Compass/app.js"></script>
    <script src="~/Scripts/Position/targetDataProcessor.js"></script>
    <script src="~/Scripts/Position/messageProcessor.js"></script>
    <script>

        
        function updatePositionLocal(position) {
            console.log('begin sim override');
            //simulation override
            position.coords.latitude = 27.961527;
            position.coords.longitude = -82.464414;
            position.coords.altitude = 30;
            //end sim override
            console.log('end sim override');
            hud.updatePosition(position);

        }
        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    x.innerHTML = "User denied the request for Geolocation."
                    break;
                case error.POSITION_UNAVAILABLE:
                    x.innerHTML = "Location information is unavailable."
                    break;
                case error.TIMEOUT:
                    x.innerHTML = "The request to get user location timed out."
                    break;
                case error.UNKNOWN_ERROR:
                default:
                    x.innerHTML = "An unknown error occurred."
                    break;
            }
        }
        positionData.LoadTargetData();
        hud.addPositionListener(updatePositionLocal, showError)
        hud.addOrientationListener(deviceOrientationListener);

        positionData.GetLatestData();

        function deviceOrientationListener(event) {
            console.log('draw targets');
            hud.drawTargets();
        }
        
        
    </script>
    <script src="http://cdn.leafletjs.com/leaflet-0.7.5/leaflet.js"></script>
    <script src="~/Scripts/Minimap/leaflet.awesome-markers.js"></script>
    <script>


        var map = L.map('map');
        // create the tile layer with correct attribution
        var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        var osmAttrib = 'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
        var osm = new L.TileLayer(osmUrl, { minZoom: 17, maxZoom: 17, attribution: osmAttrib });
        var markerlayer1;
        var markerlayer2;
        var markerLayer;


        map.addLayer(osm);
        function locationUpdate(position) {
            if (typeof (markerLayer) !== "undefined") {
                map.removeLayer(markerLayer);
            }
            if (typeof (markerlayer1) !== "undefined") {
                map.removeLayer(markerlayer1);
            }
            if (typeof (markerlayer2) !== "undefined") {
                map.removeLayer(markerlayer2);
            }

            //debug
            //var currentLong = position.coords.longitude;// = -82.46397972106933;
            //var currentLat = position.coords.latitude;// = 27.96128173377289;

            var currentLong = -82.46397972106933;
            var currentLat = 27.96128173377289;


            map.setView(new L.LatLng(currentLat, currentLong), 17);

            var redMarker = L.AwesomeMarkers.icon({
                markerColor: 'red'
            });

            for (i in window.targetdata.targets) {
                var value = window.targetdata.targets[i];

                lastPosition = value.positions[value.positions.length - 1];

                if (typeof (lastPosition) === "undefined") {
                    break;
                }

                if (0 == i) {
                    markerlayer1 = new L.Marker([lastPosition.latitude, lastPosition.longitude], { icon: redMarker });
                }
                else {
                    markerlayer2 = new L.Marker([lastPosition.latitude, lastPosition.longitude], { icon: redMarker });
                }

            }

            markerLayer = new L.Marker([currentLat, currentLong]);
            map.addLayer(markerLayer);
            map.addLayer(markerlayer1);
            map.addLayer(markerlayer2);

        }

        function locationUpdateFail(error) {
            console.log("location fail: ", error);
        }

        navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
            enableHighAccuracy: false,
            maximumAge: 30000,
            timeout: 27000
        });

    </script>
</body>
</html>